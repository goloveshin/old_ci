diff -Naur openssl-1.1.0f/Configurations/10-main.conf openssl-1.1.0f_copy/Configurations/10-main.conf
--- openssl-1.1.0f/Configurations/10-main.conf	2017-05-25 15:46:17.000000000 +0300
+++ openssl-1.1.0f_copy/Configurations/10-main.conf	2017-09-25 19:24:02.467249422 +0300
@@ -884,80 +884,6 @@
         ranlib           => "true",
     },
 
-#### Android: linux-* but without pointers to headers and libs.
-    #
-    # It takes pair of prior-set environment variables to make it work:
-    #
-    # CROSS_SYSROOT=/some/where/android-ndk-<ver>/platforms/android-<apiver>/arch-<arch>
-    # CROSS_COMPILE=<prefix>
-    #
-    # As well as PATH adjusted to cover ${CROSS_COMPILE}gcc and company.
-    # For example to compile for ICS and ARM with NDK 10d, you'd:
-    #
-    # ANDROID_NDK=/some/where/android-ndk-10d
-    # CROSS_SYSROOT=$ANDROID_NDK/platforms/android-14/arch-arm
-    # CROSS_COMPILE=arm-linux-adroideabi-
-    # PATH=$ANDROID_NDK/toolchains/arm-linux-androideabi-4.8/prebuild/linux-x86_64/bin
-    #
-    "android" => {
-        inherit_from     => [ "linux-generic32" ],
-        # Special note about unconditional -fPIC and -pie. The underlying
-        # reason is that Lollipop refuses to run non-PIE. But what about
-        # older systems and NDKs? -fPIC was never problem, so the only
-        # concern is -pie. Older toolchains, e.g. r4, appear to handle it
-        # and binaries turn mostly functional. "Mostly" means that oldest
-        # Androids, such as Froyo, fail to handle executable, but newer
-        # systems are perfectly capable of executing binaries targeting
-        # Froyo. Keep in mind that in the nutshell Android builds are
-        # about JNI, i.e. shared libraries, not applications.
-        cflags           => add(picker(default => "-mandroid -fPIC --sysroot=\$(CROSS_SYSROOT) -Wa,--noexecstack")),
-        bin_cflags       => "-pie",
-    },
-    "android-x86" => {
-        inherit_from     => [ "android", asm("x86_asm") ],
-        cflags           => add(picker(release => "-fomit-frame-pointer")),
-        bn_ops           => "BN_LLONG",
-        perlasm_scheme   => "android",
-    },
-    ################################################################
-    # Contemporary Android applications can provide multiple JNI
-    # providers in .apk, targeting multiple architectures. Among
-    # them there is "place" for two ARM flavours: generic eabi and
-    # armv7-a/hard-float. However, it should be noted that OpenSSL's
-    # ability to engage NEON is not constrained by ABI choice, nor
-    # is your ability to call OpenSSL from your application code
-    # compiled with floating-point ABI other than default 'soft'.
-    # [Latter thanks to __attribute__((pcs("aapcs"))) declaration.]
-    # This means that choice of ARM libraries you provide in .apk
-    # is driven by application needs. For example if application
-    # itself benefits from NEON or is floating-point intensive, then
-    # it might be appropriate to provide both libraries. Otherwise
-    # just generic eabi would do. But in latter case it would be
-    # appropriate to
-    #
-    #   ./Configure android-armeabi -D__ARM_MAX_ARCH__=8
-    #
-    # in order to build "universal" binary and allow OpenSSL take
-    # advantage of NEON when it's available.
-    #
-    "android-armeabi" => {
-        inherit_from     => [ "android", asm("armv4_asm") ],
-    },
-    "android-mips" => {
-        inherit_from     => [ "android", asm("mips32_asm") ],
-        perlasm_scheme   => "o32",
-    },
-
-    "android64" => {
-        inherit_from     => [ "linux-generic64" ],
-        cflags           => add(picker(default => "-mandroid -fPIC --sysroot=\$(CROSS_SYSROOT) -Wa,--noexecstack")),
-        bin_cflags       => "-pie",
-    },
-    "android64-aarch64" => {
-        inherit_from     => [ "android64", asm("aarch64_asm") ],
-        perlasm_scheme   => "linux64",
-    },
-
 #### *BSD
     "BSD-generic32" => {
         # As for thread cflag. Idea is to maintain "collective" set of
diff -Naur openssl-1.1.0f/Configurations/20-android.conf openssl-1.1.0f_copy/Configurations/20-android.conf
--- openssl-1.1.0f/Configurations/20-android.conf	1970-01-01 03:00:00.000000000 +0300
+++ openssl-1.1.0f_copy/Configurations/20-android.conf	2017-09-25 19:17:22.000000000 +0300
@@ -0,0 +1,177 @@
+#### Android: linux-* but without pointers to headers and libs.
+
+%targets = (
+    #
+    # It takes pair of prior-set environment variables to make it work:
+    #
+    # CROSS_SYSROOT=/some/where/android-ndk-<ver>/platforms/android-<apiver>/arch-<arch>
+    # CROSS_COMPILE=<prefix>
+    #
+    # As well as PATH adjusted to cover ${CROSS_COMPILE}gcc and company.
+    # For example to compile for ICS and ARM with NDK 10d, you'd:
+    #
+    # ANDROID_NDK=/some/where/android-ndk-10d
+    # CROSS_SYSROOT=$ANDROID_NDK/platforms/android-14/arch-arm
+    # CROSS_COMPILE=arm-linux-adroideabi-
+    # PATH=$ANDROID_NDK/toolchains/arm-linux-androideabi-4.8/prebuild/linux-x86_64/bin
+    #
+    "android-base" => {
+        inherit_from     => [ "linux-generic32" ],
+        template         => 1,
+        # Special note about unconditional -fPIC and -pie. The underlying
+        # reason is that Lollipop refuses to run non-PIE. But what about
+        # older systems and NDKs? -fPIC was never problem, so the only
+        # concern is -pie. Older toolchains, e.g. r4, appear to handle it
+        # and binaries turn mostly functional. "Mostly" means that oldest
+        # Androids, such as Froyo, fail to handle executable, but newer
+        # systems are perfectly capable of executing binaries targeting
+        # Froyo. Keep in mind that in the nutshell Android builds are
+        # about JNI, i.e. shared libraries, not applications.
+        cflags           => add(picker(default => "-fPIC --sysroot=\$(CROSS_SYSROOT) -Wa,--noexecstack")),
+        lflags           => "-pie",
+    },
+    "android-x86-base" => {
+        inherit_from     => [ asm("x86_asm") ],
+        template         => 1,
+        cflags           => add(picker(release => "-fomit-frame-pointer")),
+        bn_ops           => "BN_LLONG",
+        perlasm_scheme   => "android",
+    },
+    ################################################################
+    # Contemporary Android applications can provide multiple JNI
+    # providers in .apk, targeting multiple architectures. Among
+    # them there is "place" for two ARM flavours: generic eabi and
+    # armv7-a/hard-float. However, it should be noted that OpenSSL's
+    # ability to engage NEON is not constrained by ABI choice, nor
+    # is your ability to call OpenSSL from your application code
+    # compiled with floating-point ABI other than default 'soft'.
+    # [Latter thanks to __attribute__((pcs("aapcs"))) declaration.]
+    # This means that choice of ARM libraries you provide in .apk
+    # is driven by application needs. For example if application
+    # itself benefits from NEON or is floating-point intensive, then
+    # it might be appropriate to provide both libraries. Otherwise
+    # just generic eabi would do. But in latter case it would be
+    # appropriate to
+    #
+    #   ./Configure android-armeabi -D__ARM_MAX_ARCH__=8
+    #
+    # in order to build "universal" binary and allow OpenSSL take
+    # advantage of NEON when it's available.
+    #
+    "android-armeabi-base" => {
+        inherit_from     => [ asm("armv4_asm") ],
+        template         => 1,
+    },
+    "android-mips-base" => {
+        inherit_from     => [ asm("mips32_asm") ],
+        template         => 1,
+        perlasm_scheme   => "o32",
+    },
+
+    "android64-base" => {
+        inherit_from     => [ "linux-generic64" ],
+        template         => 1,
+        cflags           => add(picker(default => "-fPIC --sysroot=\$(CROSS_SYSROOT) -Wa,--noexecstack")),
+        lflags           => "-pie",
+    },
+    "android64-aarch64-base" => {
+        inherit_from     => [ asm("aarch64_asm") ],
+        template         => 1,
+        perlasm_scheme   => "linux64",
+    },
+    "android64-x86_64-base" => {
+        inherit_from     => [ asm("x86_64_asm") ],
+        template         => 1,
+        perlasm_scheme   => "elf",
+    },
+    "android64-mips64-base" => {
+        ############################################################
+        # You are more than likely have to specify target processor
+        # on ./Configure command line. Trouble is that toolchain's
+        # default is MIPS64r6 (at least in r10d), but there are no
+        # such processors around (or they are too rare to spot one).
+        # Actual problem is that MIPS64r6 is binary incompatible
+        # with previous MIPS ISA versions, in sense that unlike
+        # prior versions original MIPS binary code will fail.
+        #
+        inherit_from     => [ asm("mips64_asm") ],
+        template         => 1,
+        perlasm_scheme   => "64",
+    },
+
+    # GCC targets
+    "android" => {
+        inherit_from     => [ "android-base" ],
+        cflags           => add(picker(default => "-mandroid")),
+    },
+    "android-x86" => {
+        inherit_from     => [ "android", "android-x86-base" ],
+    },
+    "android-armeabi" => {
+        inherit_from     => [ "android", "android-armeabi-base" ],
+    },
+    "android-mips" => {
+        inherit_from     => [ "android", "android-mips-base" ],
+    },
+    "android64" => {
+        inherit_from     => [ "android64-base" ],
+        cflags           => add(picker(default => "-mandroid")),
+    },
+    "android64-aarch64" => {
+        inherit_from     => [ "android64", "android64-aarch64-base" ],
+    },
+    "android64-x86_64" => {
+        inherit_from     => [ "android64", "android64-x86_64-base" ],
+    },
+    "android64-mips64" => {
+        inherit_from     => [ "android64", "android64-mips64-base" ],
+    },
+
+    # Clang targets
+    "android-clang" => {
+        inherit_from     => [ "android-base" ],
+        cc               => "clang",
+        cxx              => "clang++",
+        cflags           => add(picker(default => "-gcc-toolchain \$(GCC_TOOLCHAIN) -D__ANDROID_API__=\$(ANDROID_API_LEVEL)")),
+        lflags           => add(picker(default => "-gcc-toolchain \$(GCC_TOOLCHAIN) --sysroot=\$(ARCH_SYSROOT)")),
+        shared_ldflag    => add(picker(default => "-pie --sysroot=\$(ARCH_SYSROOT)")),
+    },
+    "android-x86-clang" => {
+        inherit_from     => [ "android-clang", "android-x86-base" ],
+        cflags           => add(picker(default => "-target i686-none-linux-android -I\$(CROSS_SYSROOT)/include/i686-linux-android -fno-integrated-as")),
+        lflags           => add(picker(default => "-target i686-none-linux-android")),
+    },
+    "android-armeabi-clang" => {
+        inherit_from     => [ "android-clang", "android-armeabi-base" ],
+        cflags           => add(picker(default => "-target armv7-none-linux-androideabi -I\$(CROSS_SYSROOT)/include/arm-linux-androideabi -fno-integrated-as")),
+        lflags           => add(picker(default => "-target armv7-none-linux-androideabi")),
+    },
+    "android-mips-clang" => {
+        inherit_from     => [ "android-clang", "android-mips-base" ],
+        cflags           => add(picker(default => "-target mipsel-none-linux-android -I\$(CROSS_SYSROOT)/include/mipsel-linux-android -fno-integrated-as")),
+        lflags           => add(picker(default => "-target mipsel-none-linux-android")),
+    },
+    "android64-clang" => {
+        inherit_from     => [ "android64-base" ],
+        cc               => "clang",
+        cxx              => "clang++",
+        cflags           => add(picker(default => "-gcc-toolchain \$(GCC_TOOLCHAIN) -D__ANDROID_API__=\$(ANDROID_API_LEVEL)")),
+        lflags           => add(picker(default => "-gcc-toolchain \$(GCC_TOOLCHAIN) --sysroot=\$(ARCH_SYSROOT)")),
+        shared_ldflag    => add(picker(default => "-pie --sysroot=\$(ARCH_SYSROOT)")),
+    },
+    "android64-aarch64-clang" => {
+        inherit_from     => [ "android64-clang", "android64-aarch64-base" ],
+        cflags           => add(picker(default => "-target aarch64-none-linux-android -I\$(CROSS_SYSROOT)/include/aarch64-linux-android -fno-integrated-as")),
+        lflags           => add(picker(default => "-target aarch64-none-linux-android")),
+    },
+    "android64-x86_64-clang" => {
+        inherit_from     => [ "android64-clang", "android64-x86_64-base" ],
+        cflags           => add(picker(default => "-target x86_64-none-linux-android -I\$(CROSS_SYSROOT)/include/x86_64-linux-android")),
+        lflags           => add(picker(default => "-target x86_64-none-linux-android")),
+    },
+    "android64-mips64-clang" => {
+        inherit_from     => [ "android64-clang", "android64-mips64-base" ],
+        cflags           => add(picker(default => "-target mips64el-none-linux-android -I\$(CROSS_SYSROOT)/include/mips64el-linux-android")),
+        lflags           => add(picker(default => "-target mips64el-none-linux-android")),
+    },
+);
